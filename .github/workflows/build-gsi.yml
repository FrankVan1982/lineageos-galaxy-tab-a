name: Build AOSP GSI TrebleDroid

on:
  workflow_dispatch:
    inputs:
      android_version:
        description: 'Android Version'
        required: true
        default: '15'
        type: choice
        options:
          - '14'
          - '15'
          - '16'
      
      clean_build:
        description: 'Clean build'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    
    steps:
      - name: 📋 Build Info
        run: |
          echo "=========================================="
          echo "🚀 AOSP GSI TrebleDroid Build"
          echo "=========================================="
          echo "🤖 Android Version: ${{ github.event.inputs.android_version }}"
          echo "🧹 Clean Build: ${{ github.event.inputs.clean_build }}"
          echo "💾 OS: $(lsb_release -d | cut -f2)"
          echo "🖥️  CPU Cores: $(nproc)"
          echo "💿 RAM: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "📀 Disk Space: $(df -h / | awk 'NR==2 {print $4}')"
          echo "=========================================="
      
      - name: 🧹 Free up disk space
        run: |
          echo "Removing unnecessary packages..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          echo "Disk space after cleanup:"
          df -h
      
      - name: 🔧 Install dependencies
        run: |
          sudo apt-get update
          
          # Add Jammy repo for libncurses5
          echo "deb http://archive.ubuntu.com/ubuntu jammy main universe" | sudo tee /etc/apt/sources.list.d/jammy.list
          sudo apt-get update
          
          # Install build dependencies
          sudo apt-get install -y \
            git-core gnupg flex bison build-essential zip curl \
            zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
            x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev \
            libxml2-utils xsltproc unzip fontconfig python3 python3-pip \
            python-is-python3 bc bzip2 ca-certificates ccache clang cmake \
            gperf imagemagick lib32readline-dev lib32z1-dev liblz4-tool \
            libncurses-dev libssl-dev libxml2 lzop pngcrush rsync \
            schedtool squashfs-tools zip zlib1g-dev openjdk-17-jdk \
            jq wget git-lfs
          
          # Install libncurses5 from Jammy
          sudo apt-get install -y libncurses5 lib32ncurses5-dev || true
          
          # Create symlinks
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5 || true
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.5 || true
      
      - name: 📦 Install repo tool
        run: |
          sudo curl https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod a+rx /usr/local/bin/repo
          repo version
      
      - name: ⚙️ Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global color.ui false
      
      - name: 💾 Restore ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-aosp-a${{ github.event.inputs.android_version }}-${{ github.run_id }}
          restore-keys: |
            ccache-aosp-a${{ github.event.inputs.android_version }}-
      
      - name: 🔄 Setup ccache
        run: |
          mkdir -p ~/.ccache
          echo "max_size = 50G" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 6" >> ~/.ccache/ccache.conf
          ccache -M 50G
          ccache -z
      
      - name: 🗑️ Clean previous build
        if: github.event.inputs.clean_build == 'true'
        run: |
          rm -rf ~/aosp
          ccache -C
      
      - name: 📁 Create working directory
        run: |
          mkdir -p ~/aosp
          cd ~/aosp
          echo "Working directory created at ~/aosp"
          pwd
      
      - name: 📥 Clone treble_aosp
        run: |
          cd ~/aosp
          
          # Determine branch based on Android version
          case "${{ github.event.inputs.android_version }}" in
            16)
              BRANCH="android-16.0"
              ;;
            15)
              BRANCH="android-15.0"
              ;;
            14)
              BRANCH="android-14.0"
              ;;
            *)
              echo "Invalid Android version"
              exit 1
              ;;
          esac
          
          echo "📥 Cloning treble_aosp branch: $BRANCH"
          git clone https://github.com/ponces/treble_aosp.git -b $BRANCH --depth=1
          
          echo "✅ Repository cloned successfully"
          ls -la
          echo "Contents of treble_aosp:"
          ls -la treble_aosp/
      
      - name: 🚀 Run build script
        run: |
          cd ~/aosp
          
          # Set environment variables
          export USE_CCACHE=1
          export CCACHE_DIR=~/.ccache
          export CCACHE_EXEC=/usr/bin/ccache
          export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g"
          
          # Run the build script as per official instructions
          echo "🔨 Starting build..."
          bash treble_aosp/build.sh
      
      - name: 📦 Compress images
        run: |
          cd ~/builds
          
          echo "📦 Found images:"
          ls -lh system-*.img
          
          # Compress all system images
          echo "🗜️  Compressing images with xz..."
          for img in system-*.img; do
            echo "Compressing $img..."
            xz -9 -T0 -v "$img"
          done
          
          # Create checksums
          echo "🔐 Creating checksums..."
          sha256sum *.img.xz > sha256sum.txt
          
          echo "✅ Final output:"
          ls -lh
      
      - name: 📊 Build statistics
        run: |
          echo "=== ccache statistics ==="
          ccache -s
          
          echo ""
          echo "=== Disk usage ==="
          df -h
          
          echo ""
          echo "=== Output files ==="
          ls -lh ~/builds/
      
      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aosp-a${{ github.event.inputs.android_version }}-${{ github.run_number }}
          path: ~/builds/*.img.xz
          retention-days: 30
          compression-level: 0
      
      - name: 📤 Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: aosp-a${{ github.event.inputs.android_version }}-checksums-${{ github.run_number }}
          path: ~/builds/sha256sum.txt
          retention-days: 30
      
      - name: 🎉 Build completed
        run: |
          echo "=========================================="
          echo "✅ BUILD COMPLETED SUCCESSFULLY!"
          echo "=========================================="
          echo "🤖 AOSP Android ${{ github.event.inputs.android_version }}"
          echo "📅 Date: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=========================================="
          echo ""
          echo "📥 DOWNLOAD ARTIFACTS:"
          echo "   Go to Actions > This run > Artifacts section"
          echo ""
          echo "⚠️  FLASH INSTRUCTIONS FOR SM-T515:"
          echo ""
          echo "1. Download and decompress:"
          echo "   unxz system-*.img.xz"
          echo ""
          echo "2. Verify checksums:"
          echo "   sha256sum -c sha256sum.txt"
          echo ""
          echo "3. Find the right variant for your device:"
          echo "   • system-treble_arm64_bvN.img = arm64 vanilla (NO vndklite)"
          echo "   • system-treble_arm64_bgN.img = arm64 with GApps (NO vndklite)"
          echo "   • system-treble_arm64_bvN-vndklite.img = arm64 vanilla (vndklite)"
          echo "   • system-treble_arm64_bgN-vndklite.img = arm64 GApps (vndklite)"
          echo ""
          echo "4. Flash via TWRP:"
          echo "   adb reboot recovery"
          echo "   adb push system-treble_arm64_bvN.img /sdcard/"
          echo "   # In TWRP: Install > Install Image > Select file > System Image"
          echo ""
          echo "5. CRITICAL - Flash your custom boot and vendor:"
          echo "   fastboot flash boot boot_tgk.img"
          echo "   fastboot flash vendor vendor.img"
          echo ""
          echo "6. Wipe data/cache and reboot"
          echo "=========================================="
