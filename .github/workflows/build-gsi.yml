name: Build TrebleDroid GSI (LineageOS/AOSP)

on:
  workflow_dispatch:
    inputs:
      rom_type:
        description: 'ROM Type'
        required: true
        default: 'aosp'
        type: choice
        options:
          - aosp
          - lineageos
      
      android_version:
        description: 'Android Version'
        required: true
        default: '16'
        type: choice
        options:
          - '15'
          - '16'
      
      variant:
        description: 'Build variant'
        required: true
        default: 'arm64-ab-vanilla'
        type: choice
        options:
          - arm64-ab-vanilla
          - arm64-ab-vndklite
          - arm64-ab-gapps
      
      clean_build:
        description: 'Clean build'
        required: false
        default: false
        type: boolean

env:
  ROM_TYPE: ${{ github.event.inputs.rom_type }}
  ANDROID_VERSION: ${{ github.event.inputs.android_version }}
  VARIANT: ${{ github.event.inputs.variant }}
  
jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
      - name: 📋 Informazioni Build
        run: |
          echo "🚀 Avvio build TrebleDroid GSI"
          echo "📱 ROM: ${{ github.event.inputs.rom_type }}"
          echo "🤖 Android: ${{ github.event.inputs.android_version }}"
          echo "📦 Variante: ${{ github.event.inputs.variant }}"
          echo "🧹 Clean build: ${{ github.event.inputs.clean_build }}"
          echo "💾 Runner: $(lsb_release -d | cut -f2)"
          echo "🖥️ CPU: $(nproc) cores"
          echo "💿 RAM: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "📀 Spazio disponibile: $(df -h / | awk 'NR==2 {print $4}')"
      
      - name: 🔧 Preparazione ambiente Ubuntu
        run: |
          sudo apt-get update
          
          # Fix per libncurses5 su Ubuntu 24.04
          echo "deb http://archive.ubuntu.com/ubuntu jammy main universe" | sudo tee /etc/apt/sources.list.d/jammy.list
          sudo apt-get update
          
          sudo apt-get install -y \
            git-core gnupg flex bison build-essential zip curl \
            zlib1g-dev libc6-dev-i386 x11proto-core-dev \
            libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils \
            xsltproc unzip fontconfig python3 python3-pip python-is-python3 \
            bc bzip2 ca-certificates ccache clang cmake flex g++ \
            gcc git gnupg gperf imagemagick \
            lib32readline-dev lib32z1-dev liblz4-tool \
            libncurses-dev libssl-dev libxml2 \
            libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
            xsltproc zip zlib1g-dev openjdk-17-jdk jq wget
          
          # Installa libncurses5 da Jammy
          sudo apt-get install -y libncurses5 lib32ncurses5-dev libncurses5-dev || true
          
          # Crea symlink se necessario
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5 || true
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.5 || true
      
      - name: 📦 Installazione Repo
        run: |
          sudo curl https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod a+rx /usr/local/bin/repo
          repo version
      
      - name: ⚙️ Configurazione Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global color.ui false
      
      - name: 💾 Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ github.event.inputs.rom_type }}-a${{ github.event.inputs.android_version }}-${{ github.event.inputs.variant }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ github.event.inputs.rom_type }}-a${{ github.event.inputs.android_version }}-${{ github.event.inputs.variant }}-
            ccache-${{ github.event.inputs.rom_type }}-a${{ github.event.inputs.android_version }}-
      
      - name: 🔄 Configurazione ccache
        run: |
          mkdir -p ~/.ccache
          echo "max_size = 50G" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 6" >> ~/.ccache/ccache.conf
          ccache -M 50G
          ccache -z
      
      - name: 📥 Clone script di build appropriato
        run: |
          cd ~
          
          if [ "${{ github.event.inputs.rom_type }}" = "lineageos" ]; then
            echo "📥 Cloning TrebleDroid LineageOS scripts..."
            git clone https://github.com/TrebleDroid/treble_experimentations.git
          else
            echo "📥 Cloning ponces AOSP scripts..."
            git clone https://github.com/ponces/treble_aosp.git -b android-${{ github.event.inputs.android_version }}.0
          fi
      
      - name: 🗑️ Pulizia build precedente
        if: github.event.inputs.clean_build == 'true'
        run: |
          echo "Rimozione build precedente..."
          rm -rf ~/build
          ccache -C
      
      - name: 🏗️ Creazione directory di build
        run: |
          mkdir -p ~/build
          cd ~/build
      
      - name: 🚀 Avvio build script
        run: |
          cd ~/build
          
          export USE_CCACHE=1
          export CCACHE_DIR=~/.ccache
          export CCACHE_EXEC=/usr/bin/ccache
          
          # Limita RAM usage per evitare OOM
          export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g"
          
          if [ "${{ github.event.inputs.rom_type }}" = "lineageos" ]; then
            echo "🔨 Building LineageOS ${{ github.event.inputs.android_version }}..."
            
            # Determina il branch corretto
            if [ "${{ github.event.inputs.android_version }}" = "16" ]; then
              BRANCH="lineageos-23.0"
            else
              BRANCH="lineageos-22.0"
            fi
            
            # Determina la variante corretta per lo script TrebleDroid
            VARIANT_PARAM="${{ github.event.inputs.variant }}"
            # Rimuovi 'vanilla' se presente (lo script non lo usa)
            VARIANT_PARAM=$(echo "$VARIANT_PARAM" | sed 's/-vanilla//')
            
            bash ~/treble_experimentations/build-rom.sh "$BRANCH" "$VARIANT_PARAM"
          else
            echo "🔨 Building AOSP Android ${{ github.event.inputs.android_version }}..."
            bash ~/treble_aosp/build.sh
          fi
      
      - name: 📦 Trova e comprimi immagine GSI
        run: |
          cd ~/build
          
          # Cerca il system.img nelle varie possibili locazioni
          SYSTEM_IMG=$(find . -name "system*.img" -o -name "*td*.img" | grep -v ".xz" | head -1)
          
          if [ -z "$SYSTEM_IMG" ]; then
            echo "❌ System image non trovata!"
            echo "Contenuto directory build:"
            find . -name "*.img" -o -name "*.img.xz"
            exit 1
          fi
          
          echo "📦 Trovata immagine: $SYSTEM_IMG"
          
          # Crea directory output
          mkdir -p ~/output
          
          # Determina nome file output
          if [ "${{ github.event.inputs.rom_type }}" = "lineageos" ]; then
            OUTPUT_NAME="lineageos-${{ github.event.inputs.android_version }}"
          else
            OUTPUT_NAME="aosp-${{ github.event.inputs.android_version }}"
          fi
          
          OUTPUT_NAME="${OUTPUT_NAME}-${{ github.event.inputs.variant }}-$(date +%Y%m%d).img"
          
          # Copia e comprimi
          echo "📦 Compressione in corso..."
          xz -9 -T0 -c "$SYSTEM_IMG" > ~/output/${OUTPUT_NAME}.xz
          
          # Calcola hash
          cd ~/output
          sha256sum *.img.xz > sha256sum.txt
          
          echo "✅ Output creato:"
          ls -lh ~/output/
      
      - name: 📊 Statistiche ccache
        run: |
          ccache -s
      
      - name: 📤 Upload GSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.rom_type }}-a${{ github.event.inputs.android_version }}-${{ github.event.inputs.variant }}-${{ github.run_number }}
          path: ~/output/*
          retention-days: 30
          compression-level: 0
      
      - name: 🎉 Build completata!
        run: |
          echo "=========================================="
          echo "✅ Build completata con successo!"
          echo "=========================================="
          echo "📱 ROM: ${{ github.event.inputs.rom_type }}"
          echo "🤖 Android: ${{ github.event.inputs.android_version }}"
          echo "📦 Variante: ${{ github.event.inputs.variant }}"
          echo "📅 Data: $(date)"
          echo "=========================================="
          echo ""
          echo "📥 Scarica l'artifact dal tab Actions"
          echo ""
          echo "⚠️ IMPORTANTE per SM-T515:"
          echo "1. Usa il tuo boot.img con kernel TGK"
          echo "2. Usa il tuo vendor.img esistente"
          echo "3. Flash via TWRP o fastbootd"
          echo ""
          echo "🔧 Flash con fastbootd:"
          echo "  adb reboot fastboot"
          echo "  fastboot flash system system-*.img"
          echo "  fastboot reboot recovery"
          echo "  # Factory reset in recovery"
          echo "=========================================="
