name: Build AOSP GSI TrebleDroid (ponces)

on:
  workflow_dispatch:
    inputs:
      android_version:
        description: 'Android Version'
        required: true
        default: '15'
        type: choice
        options:
          - '14'
          - '15'
          - '16'
      
      build_type:
        description: 'Build Type'
        required: true
        default: 'td'
        type: choice
        options:
          - td
          - slim
          - core
      
      clean_build:
        description: 'Clean build (cancella tutto e ricomincia)'
        required: false
        default: false
        type: boolean

env:
  ANDROID_VERSION: ${{ github.event.inputs.android_version }}
  BUILD_TYPE: ${{ github.event.inputs.build_type }}
  
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    
    steps:
      - name: üìã Informazioni Build
        run: |
          echo "üöÄ Avvio build AOSP GSI TrebleDroid"
          echo "ü§ñ Android: ${{ github.event.inputs.android_version }}"
          echo "üì¶ Tipo: ${{ github.event.inputs.build_type }}"
          echo "üßπ Clean: ${{ github.event.inputs.clean_build }}"
          echo "üíæ Sistema: $(lsb_release -d | cut -f2)"
          echo "üñ•Ô∏è CPU: $(nproc) cores"
          echo "üíø RAM: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "üìÄ Spazio: $(df -h / | awk 'NR==2 {print $4}')"
      
      - name: üßπ Libera spazio disco
        run: |
          echo "Rimozione pacchetti non necessari..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h
      
      - name: üîß Preparazione ambiente Ubuntu
        run: |
          sudo apt-get update
          
          # Aggiungi repo Jammy per libncurses5
          echo "deb http://archive.ubuntu.com/ubuntu jammy main universe" | sudo tee /etc/apt/sources.list.d/jammy.list
          sudo apt-get update
          
          # Installa dipendenze
          sudo apt-get install -y \
            git-core gnupg flex bison build-essential zip curl \
            zlib1g-dev libc6-dev-i386 x11proto-core-dev \
            libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils \
            xsltproc unzip fontconfig python3 python3-pip python-is-python3 \
            bc bzip2 ca-certificates ccache clang cmake flex g++ \
            gcc git gnupg gperf imagemagick \
            lib32readline-dev lib32z1-dev liblz4-tool \
            libncurses-dev libssl-dev libxml2 libxml2-utils \
            lzop pngcrush rsync schedtool squashfs-tools \
            xsltproc zip zlib1g-dev openjdk-17-jdk jq wget git-lfs
          
          # Installa libncurses5
          sudo apt-get install -y libncurses5 lib32ncurses5-dev || true
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5 || true
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.5 || true
      
      - name: üì¶ Installa Repo tool
        run: |
          sudo curl https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod a+rx /usr/local/bin/repo
          repo version
      
      - name: ‚öôÔ∏è Configurazione Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git config --global color.ui false
      
      - name: üíæ Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-aosp-a${{ github.event.inputs.android_version }}-${{ github.event.inputs.build_type }}-${{ github.run_id }}
          restore-keys: |
            ccache-aosp-a${{ github.event.inputs.android_version }}-${{ github.event.inputs.build_type }}-
            ccache-aosp-a${{ github.event.inputs.android_version }}-
      
      - name: üîÑ Configura ccache
        run: |
          mkdir -p ~/.ccache
          echo "max_size = 50G" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 6" >> ~/.ccache/ccache.conf
          ccache -M 50G
          ccache -z
      
      - name: üóëÔ∏è Pulizia build precedente
        if: github.event.inputs.clean_build == 'true'
        run: |
          echo "Rimozione build precedente..."
          rm -rf ~/aosp
          ccache -C
      
      - name: üèóÔ∏è Crea directory build e clone script
        run: |
          mkdir -p ~/aosp
          cd ~/aosp
          
          # Determina il branch in base alla versione Android
          if [ "${{ github.event.inputs.android_version }}" = "16" ]; then
            BRANCH="android-16.0"
          elif [ "${{ github.event.inputs.android_version }}" = "15" ]; then
            BRANCH="android-15.0"
          else
            BRANCH="android-14.0"
          fi
          
          echo "üì• Cloning treble_aosp branch: $BRANCH"
          git clone https://github.com/ponces/treble_aosp.git -b $BRANCH --depth=1
          
          echo "‚úÖ Script clonato:"
          ls -la treble_aosp/
      
      - name: üöÄ Avvia build AOSP
        run: |
          cd ~/aosp
          
          # Setup variabili ambiente
          export USE_CCACHE=1
          export CCACHE_DIR=~/.ccache
          export CCACHE_EXEC=/usr/bin/ccache
          export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g"
          
          # Avvia build script
          echo "üî® Avvio build.sh con tipo: ${{ github.event.inputs.build_type }}"
          bash ~/treble_aosp/build.sh ${{ github.event.inputs.build_type }}
      
      - name: üì¶ Trova e comprimi GSI
        run: |
          cd ~/aosp
          
          # Cerca system.img nelle directory possibili
          echo "üîç Ricerca system.img..."
          find . -name "system*.img" -type f
          
          SYSTEM_IMG=$(find out/target/product -name "system.img" -type f 2>/dev/null | head -1)
          
          if [ -z "$SYSTEM_IMG" ]; then
            echo "‚ùå system.img non trovata!"
            echo "Contenuto out/target/product:"
            ls -R out/target/product/ || true
            exit 1
          fi
          
          echo "‚úÖ Trovata: $SYSTEM_IMG"
          
          # Info sulla dimensione
          du -h "$SYSTEM_IMG"
          
          # Crea directory output
          mkdir -p ~/output
          
          # Nome file output
          OUTPUT_NAME="aosp-a${{ github.event.inputs.android_version }}-${{ github.event.inputs.build_type }}-arm64-ab-$(date +%Y%m%d)"
          
          # Comprimi con xz
          echo "üì¶ Compressione in corso (pu√≤ richiedere 10-20 minuti)..."
          xz -9 -T0 -v -c "$SYSTEM_IMG" > ~/output/${OUTPUT_NAME}.img.xz
          
          # Calcola hash
          cd ~/output
          sha256sum *.img.xz > sha256sum.txt
          
          echo "‚úÖ Output creato:"
          ls -lh ~/output/
      
      - name: üìä Statistiche build
        run: |
          echo "=== Statistiche ccache ==="
          ccache -s
          
          echo ""
          echo "=== Spazio disco utilizzato ==="
          df -h
          
          echo ""
          echo "=== Output finale ==="
          ls -lh ~/output/
      
      - name: üì§ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aosp-a${{ github.event.inputs.android_version }}-${{ github.event.inputs.build_type }}-${{ github.run_number }}
          path: ~/output/*
          retention-days: 30
          compression-level: 0
      
      - name: üéâ Build completata!
        run: |
          echo "=========================================="
          echo "‚úÖ BUILD COMPLETATA CON SUCCESSO!"
          echo "=========================================="
          echo "ü§ñ AOSP Android ${{ github.event.inputs.android_version }}"
          echo "üì¶ Tipo: ${{ github.event.inputs.build_type }}"
          echo "üìÖ Data: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=========================================="
          echo ""
          echo "üì• DOWNLOAD:"
          echo "   Vai su Actions > questa run > Artifacts"
          echo ""
          echo "‚ö†Ô∏è  FLASH SU SM-T515:"
          echo "   1. Decomprimi: unxz file.img.xz"
          echo "   2. Verifica hash: sha256sum -c sha256sum.txt"
          echo "   3. Reboot recovery: adb reboot recovery"
          echo "   4. In TWRP: Install > Install Image"
          echo "   5. Seleziona System Image"
          echo "   6. IMPORTANTE: Reflash boot.img TGK!"
          echo "   7. IMPORTANTE: Reflash vendor.img!"
          echo "   8. Wipe dalvik + cache"
          echo "   9. Reboot"
          echo ""
          echo "üìù TIPI DI BUILD:"
          echo "   ‚Ä¢ td (TrebleDroid) - Build completa con tutte le features"
          echo "   ‚Ä¢ slim - Build ridotta senza bloat"
          echo "   ‚Ä¢ core - Build minimale AOSP puro"
          echo "=========================================="
